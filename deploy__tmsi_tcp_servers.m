%DEPLOY__TMSI_TCP_SERVERS
%
% Starts up the TMSi online data visualization server.
% See details in README.MD

close all force;
% BROADCAST_ADDRESS = "192.168.1.255";
% SERVER_ADDRESS = "128.2.244.60";
% BROADCAST_ADDRESS = "127.0.0.1";
% SERVER_ADDRESS = "127.0.0.1";
% UDP_STATE_BROADCAST_PORT = 3030;    % UDP port: state
% UDP_NAME_BROADCAST_PORT  = 3031;    % UDP port: name
% UDP_EXTRA_BROADCAST_PORT = 3032;    % UDP port: extra
% UDP_TASK_BROADCAST_PORT  = 3033;    % UDP port: task
% UDP_DATA_BROADCAST_PORT  = 3034;    % UDP port: data
% UDP_CONTROLLER_RECV_PORT = 3035;    % UDP port: receiver (controller)
% SERVER_PORT_CONTROLLER   = 5000;    % Server port for CONTROLLER
% SERVER_PORT_DATA = struct('A', 5020, 'B', 5021); % Ports for DATA servers. % Assign by TMSiSAGA tag ('A', 'B', .. etc)
% DEFAULT_DATA_SHARE = strrep("R:\NMLShare\raw_data\human", "\", "/");
% DEFAULT_SUBJ = "Test";
% TRIGGER_CHANNEL = struct('A', 70, 'B', 70); % In `example__tmsi_stream_service` session, you can do:
% % >> find(ch.isTrigger);   
% %   That should give you the channel index (first thing returned in that
% %   array).
% TRIGGER_BIT = struct('A', 9, 'B', 9);
% N_SAMPLES_LOOP_BUFFER = 16384;
% N_TRIGGERS_RMS = 20; % Number of triggers to average on
% RMS_SAMPLE_EPOCH = round(([12.5, 50]).*4); % milliseconds, with 4 kHz sample rate 
FIGURE_POSITION = struct(...
    'A', [50 450 560 420], ...
    'B', [50 100 560 420]);
COLORS = [0 0 0; ...
          0 0 1; ...
          1 0 0; ...
          1 0 1];

[config, TAG, SN, N_CLIENT] = parse_main_config('config.yaml');


%% Create TMSi CONTROLLER server
fprintf(1,'Setting up CONTROLLER TCP server...\n');
if exist('serv__controller', 'var')~=0
    if ~iscell(serv__controller)
        delete(serv__controller);
    end
    clear serv__controller;
end
serv__controller = tcpserver(config.Server.Address.TCP, config.Server.TCP.Controller, ...
    "ConnectionChangedFcn", @server__CON_connection_changed_cb);

% Set the server properties that we care about, here:
tank = string(sprintf("%s_%04d_%02d_%02d", config.Default.Subject, year(today), month(today), day(today)));
% port_list = struct(...
%     'state', UDP_STATE_BROADCAST_PORT, ...
%     'name', UDP_NAME_BROADCAST_PORT, ...
%     'extra', UDP_EXTRA_BROADCAST_PORT, ...
%     'task', UDP_TASK_BROADCAST_PORT, ...
%     'data', UDP_DATA_BROADCAST_PORT, ...
%     'recv', UDP_CONTROLLER_RECV_PORT );

serv__controller.UserData = struct(...
    'state', "idle", ...
    'config', config, ...
    'datashare', config.Default.Folder, ...
    'tank', tank, ...
    'udp', udpport("byte", 'EnablePortSharing', true), ...
    'recv', udpport("byte"), ...
    'port', config.Server.UDP, ...
    'address', config.Server.Address.UDP, ...
    'block', "0", ...
    'file', strrep(fullfile(config.Default.Folder, config.Default.Subject, tank, sprintf("%s_%%s_0", tank)), "\", "/"));
serv__controller.UserData.udp.EnableBroadcast = true;
configureCallback(serv__controller, "terminator", @(src, evt)callback.serverHandleControllerMessages(src, evt));

%% Channels configuration struct
% channels = struct('A', struct('CREF', 1,  'UNI', 2:65, 'BIP', 66:69, 'AUX', 70:71, 'TRIG', TRIGGER_CHANNEL.A, 'STAT', 72, 'COUNT', 73, 'n', struct('channels', 73, 'samples', N_SAMPLES_LOOP_BUFFER)), ...
%                   'B', struct('CREF', 1,  'UNI', 2:65, 'BIP', 66:69, 'TRIG', TRIGGER_CHANNEL.B, 'STAT', 70, 'COUNT', 71, 'n', struct('channels', 71, 'samples', N_SAMPLES_LOOP_BUFFER)));

%% Create TMSi ONLINE DATA VISUALIZER server for SAGA-<TAG>
if exist('serv__visualizer', 'var')~=0
    my_tags = fieldnames(serv__visualizer);
    for ii = 1:numel(my_tags)
        delete(serv__visualizer.(my_tags{ii})); 
    end
    clear serv__visualizer my_tags;
end
% fig = struct;
% ax_hd = struct;
% ax_line = struct;
% con = struct;
% lab = struct;
% h = struct;
% L = struct;
% serv__visualizer = struct;
% xvec = (config.Default.RMS_Sample_Epoch.Start:config.Default.RMS_Sample_Epoch.Stop)./4;
% nsamples_bip = numel(xvec);
% fprintf(1,'Initializing data VIEWER TCP servers...');
% for ii = 1:numel(TAG)
%     tag = TAG{ii};
%     fig.(tag) = figure('Name', sprintf('SAGA-%s', tag), ...
%         'Color', 'w', 'Position', FIGURE_POSITION.(tag));
%     L.(tag) = tiledlayout(fig.(tag),3,3);
%     ax_hd.(tag) = nexttile(L.(tag), 1, [2 2]);
%     colorbar(ax_hd.(tag));
%     set(ax_hd.(tag), ...
%         "NextPlot", 'add', "FontName", 'Tahoma', ...
%         'XTick', 1:8, 'YTick', 1:8, 'XLim', [0.5 8.5], ...
%         'YLim', [0.5 8.5], 'XTickLabel', 1:8:57);
%     [~, con.(tag)] = contourf(ax_hd.(tag), 1:8, 1:8, randn(8, 8));
%     title(ax_hd.(tag), "HD-EMG Grid", ...
%         "FontName", 'Tahoma', 'Color', [0.6 0.6 0.6]);
%     lab.(tag) = title(L.(tag), sprintf("SAGA-%s::x", tag), ...
%         "FontName", 'Tahoma', "Color", 'k', 'FontWeight', 'bold');
%     ax_line.(tag) = nexttile(L.(tag), 3, [2 1]);
%     set(ax_line.(tag), 'NextPlot', 'add', 'FontName', 'Tahoma', ...
%         'XLim', [0 1], 'YLim', [-0.5 4.5], 'XTick', [], 'YTick', 0.5:1:3.5, ...
%         'YTickLabel', 1:4, 'YDir', 'reverse');
%     title(ax_line.(tag), "Bipolar", 'Color', [0.6 0.6 0.6], 'FontName', 'Tahoma');
%     colorbar(ax_line.(tag));
%     h.(tag) = line(ax_line.(tag), 'XData', [], 'YData', [], 'LineWidth', 1.5, 'Color', 'k');
%     im.(tag) = imagesc(ax_line.(tag), 'XData', [0 1], 'YData', [0 4], 'CData', zeros(4, 1));
%     %TODO: Add streaming single-channel option (not ready for 5/12)
%     ax_multi.(tag) = nexttile(L.(tag), 7, [1 3]);
%     title(ax_multi.(tag), "BIP (time)", 'Color', [0.6 0.6 0.6], 'FontName', 'Tahoma');
%     
%     set(ax_multi.(tag), 'NextPlot', 'add', 'FontName', 'Tahoma', ...
%         'XColor', 'k', 'YColor', 'k', 'LineWidth', 1.5);
%     multi_line.(tag) = gobjects(4, 1);
%     for iLine = 1:4
%         multi_line.(tag)(iLine) = line(ax_multi.(tag), xvec, ...
%             zeros(size(xvec)), 'LineWidth', 1.5, 'Color', COLORS(iLine, :));
%     end
%     xlabel(ax_multi.(tag), 'Time (ms)', 'FontName', 'Tahoma', ...
%         'Color', [0.75 0.75 0.75], 'FontWeight', 'bold');
%     xlim(ax_multi.(tag), [0 50]);
%     patch(ax_multi.(tag), [0 0 config.Default.RMS_Sample_Epoch.Start/4 config.Default.RMS_Sample_Epoch.Start/4], [-20 20 20 -20], ...
%         'r', 'FaceAlpha', 0.75, 'EdgeColor', 'none');
%     serv__visualizer.(tag) = tcpserver(...
%         config.Server.Address.TCP, ...
%         config.Server.TCP.(tag).Viewer, ...
%         "ConnectionChangedFcn", @server__DATA_connection_changed_cb, ...
%         "Timeout", 0.5);
%     serv__visualizer.(tag).UserData = struct(...
%         'uni', con.(tag), ...
%         'lab', lab.(tag), ...
%         'lab_expr', sprintf('SAGA-%s::%%s', tag), ...
%         'line', h.(tag), ...
%         'multi_line', multi_line.(tag), ...
%         'bip', im.(tag), ...
%         'data', [], ...
%         'n', config.SAGA.(tag).Channels.n, ...
%         'channels', config.SAGA.(tag).Channels, ...
%         'last', struct('set', [nan, nan]), ...
%         'rms', struct('epoch', [config.Default.RMS_Sample_Epoch.Start, config.Default.RMS_Sample_Epoch.Stop], ...
%                       'index', 1, ...
%                       'index_max', config.Default.N_Triggers, ...
%                       'uni',zeros(8, 8, config.Default.N_Triggers), ...
%                       'bip', zeros(4, 1, config.Default.N_Triggers)), ...
%         'ts', struct('bip', zeros(4, nsamples_bip, config.Default.N_Triggers)), ...
%         'sync', struct('ch', config.SAGA.(tag).Trigger.Channel, ...
%                        'bit', config.SAGA.(tag).Trigger.Bit), ...
%         'tag', tag);
%     n_bytes = 8*config.SAGA.(tag).Channels.n.samples*config.SAGA.(tag).Channels.n.channels;
%     configureCallback(serv__visualizer.(tag), "byte", n_bytes, ...
%         @(src, evt)callback.serverHandleRMS(src, evt));
% end
for ii = 1:numel(TAG)
    tag = TAG{ii};
    serv__visualizer.(tag) = tcpserver(...
            config.Server.Address.TCP, ...
            config.Server.TCP.(tag).Viewer, ...
            "ConnectionChangedFcn", @server__DATA_connection_changed_cb, ...
            "Timeout", 0.5);
    serv__visualizer.(tag).UserData = struct(...
        'app', SAGA_Data_Visualizer(tag, config), ...
        'n', config.SAGA.(tag).Channels.n.samples);
    
%     n_samples = config.SAGA.(tag).Channels.n.samples*config.SAGA.(tag).Channels.n.channels;
    n_samples = config.SAGA.(tag).Channels.n.samples + 1;
    configureCallback(serv__visualizer.(tag), "byte", 8*n_samples, ...
        @(src, evt)callback.serverVisualizationCallbackWrapper(src, evt));
    serv__controller.UserData.visualizer.(tag) = serv__visualizer;
end

%% Create TMSi Worker Server
%   cfg__worker - Array struct, where each element has the fields:
%           'delimiter' - (usually, '.' -- depends on how data is passed to "worker" server)
%           'tag' - "A" or "B"
%           'port' - usually 4000 (A) or 4001 (B)
%           'sync_bit' - Usually this is 9 or 10
%           'type' - Can be ".poly5" or ".mat"
%           'fcn' - The callback function handle
%           'terminator' - Typically "LF" but can be "CR" or "CR/LF"
%               ("LF" - line feed: \n | "CR" - carriage return: \r)
fprintf(1,'Deploying post-processing WORKER TCP servers...\n');
cfg__worker = struct(...
    'delimiter', {'.'; '.'}, ...
    'tag', {'A'; 'B'}, ...
    'address', {config.Server.Address.TCP; config.Server.Address.TCP}, ...
    'port', {config.Server.TCP.A.Worker; config.Server.TCP.B.Worker}, ...
    'sync_bit', {config.SAGA.A.Trigger.Bit; config.SAGA.B.Trigger.Bit}, ...
    'type', {config.SAGA.A.FileType; config.SAGA.B.FileType}, ...
    'fcn', {@callback.exportFigures; @callback.exportFigures}, ...
    'terminator', {'LF'; 'LF'});
serv__worker = deploy__postprocessing_worker_server(cfg__worker);
fprintf(1,'complete\n');

fprintf(1,'Running all servers until application windows are closed.\n');
for ii = 1:numel(TAG)
    waitfor(serv__visualizer.(TAG{ii}).UserData.app); 
end