%DEPLOY__TMSI_TCP_SERVERS
%
% Starts up the TMSi online data visualization server.
% See details in README.MD

close all force;
FIGURE_POSITION = struct(...
    'A', [50 450 560 420], ...
    'B', [50 100 560 420]);
COLORS = [0 0 0; ...
          0 0 1; ...
          1 0 0; ...
          1 0 1];

[config, TAG, SN, N_CLIENT] = parse_main_config(parameters('config'));


%% Create TMSi CONTROLLER server
fprintf(1,'Setting up CONTROLLER TCP server...\n');
if exist('serv__controller', 'var')~=0
    if ~iscell(serv__controller)
        delete(serv__controller);
    end
    clear serv__controller;
end
serv__controller = tcpserver(config.Server.Address.TCP, config.Server.TCP.Controller, ...
    "ConnectionChangedFcn", @server__CON_connection_changed_cb);

% Set the server properties that we care about, here:
tank = string(sprintf("%s_%04d_%02d_%02d", config.Default.Subject, year(today), month(today), day(today)));

serv__controller.UserData = struct(...
    'state', "idle", ...
    'config', config, ...
    'datashare', config.Default.Folder, ...
    'tank', tank, ...
    'udp', udpport("byte", 'EnablePortSharing', true), ...
    'recv', udpport("byte"), ...
    'port', config.Server.UDP, ...
    'address', config.Server.Address.UDP, ...
    'block', "0", ...
    'file', strrep(fullfile(config.Default.Folder, config.Default.Subject, tank, sprintf("%s_%%s_0", tank)), "\", "/"));
serv__controller.UserData.udp.EnableBroadcast = true;
configureCallback(serv__controller, "terminator", @(src, evt)callback.serverHandleControllerMessages(src, evt));

%% Create TMSi ONLINE DATA VISUALIZER server for SAGA-<TAG>
if exist('serv__visualizer', 'var')~=0
    my_tags = fieldnames(serv__visualizer);
    for ii = 1:numel(my_tags)
        delete(serv__visualizer.(my_tags{ii})); 
    end
    clear serv__visualizer my_tags;
end

for ii = 1:numel(TAG)
    tag = TAG{ii};
    serv__visualizer.(tag) = tcpserver(...
            config.Server.Address.TCP, ...
            config.Server.TCP.(tag).Viewer, ...
            "ConnectionChangedFcn", @(src,~)callback.handleConnectionChangedIndicator(src,"app","DataConnectionStatusLamp"), ...
            "Timeout", 0.5);    
    serv__visualizer.(tag).UserData = struct(...
                'app', SAGA_Data_Visualizer(tag, config), ...
                'n', config.SAGA.(tag).Channels.n.samples);
%     n_samples = config.SAGA.(tag).Channels.n.samples*config.SAGA.(tag).Channels.n.channels;
    n_samples = config.SAGA.(tag).Channels.n.samples + 1;
    configureCallback(serv__visualizer.(tag), "byte", 8*(n_samples), ...
        @(src, evt)callback.serverVisualizationCallbackWrapper(src, evt));
    serv__controller.UserData.visualizer.(tag) = serv__visualizer;
end

%% Create TMSi Worker Server
%   cfg__worker - Array struct, where each element has the fields:
%           'delimiter' - (usually, '.' -- depends on how data is passed to "worker" server)
%           'tag' - "A" or "B"
%           'port' - usually 4000 (A) or 4001 (B)
%           'sync_bit' - Usually this is 9 or 10
%           'type' - Can be ".poly5" or ".mat"
%           'fcn' - The callback function handle
%           'terminator' - Typically "LF" but can be "CR" or "CR/LF"
%               ("LF" - line feed: \n | "CR" - carriage return: \r)
if config.Default.Use_Worker_Server
    fprintf(1,'Deploying post-processing WORKER TCP servers...\n');
    cfg__worker = struct(...
        'delimiter', {'.'; '.'}, ...
        'tag', {'A'; 'B'}, ...
        'address', {config.Server.Address.Worker; config.Server.Address.Worker}, ...
        'port', {config.Server.TCP.A.Worker; config.Server.TCP.B.Worker}, ...
        'sync_bit', {config.SAGA.A.Trigger.Bit; config.SAGA.B.Trigger.Bit}, ...
        'type', {config.SAGA.A.FileType; config.SAGA.B.FileType}, ...
        'fcn', {@callback.exportFigures; @callback.exportFigures}, ...
        'terminator', {'LF'; 'LF'});
    serv__worker = deploy__postprocessing_worker_server(cfg__worker);
    fprintf(1,'complete\n');
end

%% Keep application running
fprintf(1,'Running all servers until application windows are closed.\n');
for ii = 1:numel(TAG)
    waitfor(serv__visualizer.(TAG{ii}).UserData.app); 
end