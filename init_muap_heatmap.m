function [hFigure, hImage, hColorBar, hChTxt] = init_muap_heatmap(options)

arguments
    options.Subject = "Default";
    options.Block = 0;
    options.RowsPerGrid = 8;
    options.ColumnsPerGrid = 4;
    options.Grids = ["Prox EXT", "Prox FLX", "Dist EXT", "Dist FLX"];
    options.Colormap = turbo(256);
    options.CLim (1,2) double {mustBeInteger} = [0 5];
    options.ParametersFileDefault {mustBeTextScalar} = 'configurations/decoding/MUAP_Reaction_Parameters.mat';
    options.ParametersFileSaveExpression {mustBeTextScalar} = 'configurations/decoding/%s_%s_MUAP_Reaction_Parameters_%d.mat';
end
global SPIKE_HISTORY DEBOUNCE_HISTORY THRESHOLD_GAIN SELECTED_CHANNEL RISING_THRESH FALLING_THRESH RMS_ALPHA RMS_BETA DEBOUNCE_LOOP_ITERATIONS BAD_CH %#ok<GVMIS>

nGrids = numel(options.Grids);
hFigure = figure('Color', 'w', 'Name', 'MUAP Heatmap', ...
    'MenuBar', 'none', 'ToolBar', 'none', ...
    'Position',[300   300   900   420]);
ax = axes(hFigure, 'NextPlot', 'add', 'YDir', 'normal', ...
    'XColor', 'none', 'YColor', 'none', ...
    'XLim', [0.5, nGrids * options.ColumnsPerGrid+0.5], ...
    'YLim', [0.5, options.RowsPerGrid + 0.5], 'Colormap', options.Colormap, ...
    'CLim', options.CLim, 'ButtonDownFcn',@handleHeatmapClick, ...
    'UserData', gobjects(1,0));
cdata = zeros(options.RowsPerGrid, options.ColumnsPerGrid*nGrids);
hImage = imagesc(ax, ...
    [1, options.ColumnsPerGrid * nGrids], ...
    [1, options.RowsPerGrid], ...
    cdata, 'HitTest','off');
hColorBar = colorbar(ax, 'FontName','Tahoma','Ticks',sort([options.CLim(1), RISING_THRESH, FALLING_THRESH,   options.CLim(2)],'ascend'), ...
    'TickLabels', {sprintf('%d',round(options.CLim(1))), '\color{red}RISING', '\color{blue}FALLING',sprintf('%d',round(options.CLim(2)))});
title(hColorBar, 'Count', 'FontName', 'Tahoma', 'Color', [0.65 0.65 0.65]);
title(ax, sprintf('%s: Block-%02d Forearm Heatmap (Spikes)',options.Subject, options.Block), 'FontName', 'Tahoma', 'Color', 'k');
for ii = 1:nGrids
    tx = 0.5 + (options.ColumnsPerGrid/2) + options.ColumnsPerGrid * (ii-1);
    text(ax, tx, ax.YLim(1)-0.1, options.Grids{ii}, ...
        'FontName', 'Consolas', 'Color', [0.5 0.5 0.5], 'FontSize', 8, ...
        'HorizontalAlignment','center', 'VerticalAlignment','cap','HitTest','off');
    if ii < nGrids
        lx = 0.5 + options.ColumnsPerGrid * ii;
        line(ax, ones(1,2).*lx, ax.YLim, 'Color', 'k', 'LineWidth', 2, 'LineStyle', '--','HitTest','off');
    end
end
hChTxt = gobjects(numel(cdata), 1);
ch_txt = strings(128,1);
for iCh = 1:numel(cdata)
    ch_txt(iCh) = sprintf("%03d", iCh);
    tx = ceil(iCh / options.RowsPerGrid );
    ty = rem(iCh-1,options.RowsPerGrid)+1;
    hChTxt(iCh) = text(ax, tx, ty, ch_txt(iCh), 'Color', 'w', 'FontWeight', 'normal', ...
        'FontSize', 8, 'FontName', 'Consolas', 'HorizontalAlignment','center', ...
        'VerticalAlignment','middle','HitTest','off');
end

set(hChTxt(SELECTED_CHANNEL),'Color','m','FontWeight','bold');
if ~isempty(BAD_CH)
    o_x = [-0.5, -0.5, 0.5, 0.5];
    o_y = [-0.5, 0.5, 0.5, -0.5];
    for ii = 1:numel(BAD_CH)
        [r,c] = ind2sub([8 16], BAD_CH(ii));
        ax.UserData = [ax.UserData, ...
                        patch(ax, c + o_x, ...
                                   r + o_y, 'k', ...
                                   'UserData', BAD_CH(ii), ...
                                   'HitTest', 'off')];
    end
end

hFigure.UserData = struct;
uicontrol(hFigure, 'Style', 'text', 'Tag', 'Channel Selection UIControl Label', ...
    'Position', [10 395 80 15], ...
    'String', "Channel:", 'FontName', 'Consolas', 'FontWeight', 'bold', 'FontSize', 10, ...
    'ForegroundColor', 'm', 'BackgroundColor', 'w');
hFigure.UserData.ChannelNumberControl = uicontrol(hFigure,'Style','popupmenu', ...
    'Tag', 'Channel Selector UIControl', ...
    'Position', [20 365 60 20], ...
    'String', ch_txt, 'Value', SELECTED_CHANNEL, 'Callback', @(src, ~)handleChannelSelectionChange(src, hChTxt));

uicontrol(hFigure,'Style','text','Tag','Rising Threshold UIControl Label', ...
    'Position', [10 330 80 15], ...
    'HorizontalAlignment', 'center', ...
    'String', "Rising Threshold", ...
    'FontName', 'Consolas', 'FontSize', 10, ...
    'FontWeight', 'bold', 'ForegroundColor', 'r', 'BackgroundColor', 'w');
hFigure.UserData.RisingThreshControl = uicontrol(hFigure,'Style','edit',...
    'Tag', 'Rising Threshold UIControl', ...
    'Position', [20 310 60 15], ...
    'String', num2str(RISING_THRESH), 'FontName', 'Consolas', ...
    'FontSize',8,'ForegroundColor','r','FontWeight','bold', ...
    'UserData', options.CLim, 'Callback', @(src, ~)handleRisingThresholdChange(src, hColorBar));

uicontrol(hFigure,'Style','text','Tag','Falling Threshold UIControl Label', ...
    'Position', [10 270 80 15], ...
    'String', "Falling Threshold", ...
    'HorizontalAlignment', 'center', ...
    'FontName', 'Consolas', 'FontSize', 10, ...
    'FontWeight', 'bold', 'ForegroundColor', 'b', 'BackgroundColor', 'w');
hFigure.UserData.FallingThreshControl = uicontrol(hFigure,'Style','edit',...
    'Tag','Falling Threshold UIControl', ...
    'Position', [20 250 60 15], ...
    'String', num2str(FALLING_THRESH),  'FontName', 'Consolas', ...
    'FontSize',8,'ForegroundColor','b','FontWeight','bold', ...
    'UserData', options.CLim, 'Callback', @(src, ~)handleFallingThresholdChange(src, hColorBar));

uicontrol(hFigure,'Style','text','Tag','Threshold Gain UIControl Label', ...
    'Position', [10 225 80 15], ...
    'String', "Threshold Gain", ...
    'HorizontalAlignment', 'center', ...
    'FontName', 'Consolas', 'FontSize', 10, ...
    'FontWeight', 'bold', 'ForegroundColor', 'k', 'BackgroundColor', 'w');
hFigure.UserData.ThreshGainControl = uicontrol(hFigure,'Style','edit',...
    'Tag','Threshold Gain UIControl', ...
    'Position', [20 208 60 15], ...
    'String', num2str(THRESHOLD_GAIN),  'FontName', 'Consolas', ...
    'FontSize',8,'ForegroundColor','k','FontWeight','bold', ...
    'UserData', options.CLim, 'Callback', @(src, ~)handleThresholdGainChange(src));


hFigure.UserData.SmoothingControlLabel = uicontrol(hFigure,'Style','text','Tag','Smoothing UIControl Label', ...
    'Position', [10 160 80 30], ...
    'String', sprintf("Smoothing: %5.1f%%", round(RMS_BETA*100,1)), ...
    'HorizontalAlignment', 'center', ...
    'FontName', 'Consolas', 'FontSize', 6, ...
    'FontWeight', 'normal', 'ForegroundColor', 'k', 'BackgroundColor', 'w');
hFigure.UserData.SmoothingControl = uicontrol(hFigure,'Style','slider',...
    'Tag','Smoothing Level UIControl', ...
    'Position', [20 140 60 15], ...
    'Value', RMS_BETA,  'Min', 0, 'Max', 1, ...
    'SliderStep', [0.001, 0.01], ...
    'UserData', options.CLim, ...
    'Callback', @(src, ~)handleSmoothingLevelChange(src, hFigure.UserData.SmoothingControlLabel));

uicontrol(hFigure,'Style','text','Tag','Debounce Iterations UIControl Label', ...
    'Position', [10 110 80 15], ...
    'String', "Debounce:", ...
    'HorizontalAlignment', 'center', ...
    'FontName', 'Consolas', 'FontSize', 10, ...
    'FontWeight', 'bold', 'ForegroundColor', 'k', 'BackgroundColor', 'w');
hFigure.UserData.DebounceIterationsControl = uicontrol(hFigure,'Style','edit',...
    'Tag','Debounce Iterations UIControl', ...
    'Position', [20 80 60 15], ...
    'String', num2str(DEBOUNCE_LOOP_ITERATIONS),  'FontName', 'Consolas', ...
    'FontSize',8,'ForegroundColor','k','FontWeight','bold', ...
    'Callback', @(src, evt)handleDebounceIterationsChange(src, evt));

uicontrol(hFigure,'Style','text','Tag','Debounce History UIControl Label', ...
    'Position', [800 340 80 15], ...
    'String', "History:", ...
    'HorizontalAlignment', 'center', ...
    'FontName', 'Consolas', 'FontSize', 10, ...
    'FontWeight', 'bold', 'ForegroundColor', 'k', 'BackgroundColor', 'w');
hFigure.UserData.DebounceHistoryControl = uicontrol(hFigure,'Style','edit',...
    'Tag','Debounce History UIControl', ...
    'Position', [810 320 60 15], ...
    'String', num2str(DEBOUNCE_HISTORY),  'FontName', 'Consolas', ...
    'FontSize',8,'ForegroundColor','k','FontWeight','bold', ...
    'Callback', @(src, evt)handleDebounceHistoryChange(src, evt));

hFigure.UserData.SaveButton = uicontrol(hFigure, 'Style', 'pushbutton', ...
    'Position', [20 50 60 15], ...
    'String', 'Save', 'FontName', 'Consolas', 'FontWeight', 'bold', ...
    'ForegroundColor', [0.2 0.8 0.2], ...
    'UserData', struct('expression', options.ParametersFileSaveExpression, 'subject', options.Subject, 'block', options.Block), ...
    'Callback', @(src, ~)handleSavingParameters(src));

hFigure.UserData.LoadButton = uicontrol(hFigure, 'Style', 'pushbutton', ...
    'Position', [20 20 60 15], ...
    'String', 'Load', 'FontName', 'Consolas', 'FontWeight', 'bold', ...
    'ForegroundColor', [0.3 0.2 0.8], ...
    'UserData', options.ParametersFileDefault, ...
    'Callback', @(src, ~)handleLoadingParameters(src));

    function handleChannelSelectionChange(src, hChTxt)
        set(hChTxt(SELECTED_CHANNEL),'String',sprintf("%03d", SELECTED_CHANNEL), ...
            'FontWeight', 'normal', 'Color', 'w');
        SELECTED_CHANNEL = src.Value;
        set(hChTxt(SELECTED_CHANNEL),'FontWeight', 'bold', 'Color', 'm');
    end

    function handleFallingThresholdChange(src, hColorBar)
        FALLING_THRESH = str2double(src.String);
        if FALLING_THRESH == RISING_THRESH
            FALLING_THRESH = RISING_THRESH + 0.1;
        end

        if RISING_THRESH > FALLING_THRESH
            hColorBar.TickLabels(2:3) = {'\color{blue}FALLING', '\color{red}RISING'};
        else
            hColorBar.TickLabels(2:3) = {'\color{red}RISING', '\color{blue}FALLING'};
        end
        set(hColorBar, 'Ticks', sort([src.UserData(1), RISING_THRESH, FALLING_THRESH, src.UserData(2)],'ascend'));
    end

    function handleRisingThresholdChange(src, hColorBar)
        RISING_THRESH = str2double(src.String);
        if RISING_THRESH == FALLING_THRESH
            RISING_THRESH = FALLING_THRESH - 0.1;
        end
        if RISING_THRESH > FALLING_THRESH
            hColorBar.TickLabels(2:3) = {'\color{blue}FALLING', '\color{red}RISING'};
        else
            hColorBar.TickLabels(2:3) = {'\color{red}RISING', '\color{blue}FALLING'};
        end
        set(hColorBar, 'Ticks', sort([src.UserData(1), RISING_THRESH, FALLING_THRESH, src.UserData(2)],'ascend'));
    end

    function handleThresholdGainChange(src)
        THRESHOLD_GAIN = round(str2double(src.String),2);
        src.String = num2str(THRESHOLD_GAIN);
    end

    function handleSmoothingLevelChange(src, hSmoothingLab)
        RMS_BETA = round(src.Value,3);
        set(src,'Value',RMS_BETA);
        RMS_ALPHA = 1 - RMS_BETA;
        set(hSmoothingLab,'String',sprintf("Smoothing: %5.1f%%", round(RMS_BETA*100,1)));
    end
    function handleDebounceIterationsChange(src, evt)
        tmp = max(round(str2double(src.String)),0);
        disp(evt);
        if isnumeric(tmp)
            DEBOUNCE_LOOP_ITERATIONS = tmp;
            src.String = sprintf("%d", DEBOUNCE_LOOP_ITERATIONS);
        end
    end
    function handleDebounceHistoryChange(src, evt)
        tmp = max(round(str2double(src.String)),0);
        disp(evt);
        if isnumeric(tmp)
            DEBOUNCE_HISTORY = tmp;
            src.String = sprintf("%d", DEBOUNCE_HISTORY);
            SPIKE_HISTORY = zeros(128, DEBOUNCE_HISTORY);
        end
    end
    function handleLoadingParameters(src)
        in = load(src.UserData);
        fprintf(1,'Loaded parameters from %s\n', src.UserData);
        f = src.Parent;
        SELECTED_CHANNEL = in.SELECTED_CHANNEL;
        f.UserData.ChannelNumberControl.Value = SELECTED_CHANNEL;

        RISING_THRESH = in.RISING_THRESH;
        f.UserData.RisingThreshControl.String = sprintf("%.1f", RISING_THRESH);

        FALLING_THRESH = in.FALLING_THRESH;
        f.UserData.FallingThreshControl.String = sprintf("%.1f", FALLING_THRESH);
        
        RMS_ALPHA = in.RMS_ALPHA;
        RMS_BETA = in.RMS_BETA;
        f.UserData.SmoothingControl.Value = RMS_BETA;
        f.UserData.SmoothingControlLabel.String = sprintf("Smoothing: %5.1f%%", round(RMS_BETA*100,1));

        DEBOUNCE_LOOP_ITERATIONS = in.DEBOUNCE_LOOP_ITERATIONS;
        f.UserData.DebounceIterationsControl.String = sprintf("%d", DEBOUNCE_LOOP_ITERATIONS);

        if isfield(in,'BAD_CH')
            BAD_CH = in.BAD_CH;
            hAx = findobj(src.Parent.Children,'type','axes');
            delete(hAx.UserData);
            offset_x = [-0.5, -0.5, 0.5, 0.5];
            offset_y = [-0.5, 0.5, 0.5, -0.5];
            for curPatch = 1:numel(BAD_CH)
                [row,col] = ind2sub([8 16], BAD_CH(curPatch));
                hAx.UserData = [hAx.UserData, ...
                                patch(hAx, col + offset_x, ...
                                           row + offset_y, 'k', ...
                                           'UserData', BAD_CH(curPatch), ...
                                           'HitTest', 'off')];
            end
        end

        drawnow();
        fprintf(1,'\t->\tParameters updated successfully.\n');
    end
    function handleSavingParameters(src)
        dt = datetime('now', 'Format', 'uuuu-MM-dd');
        s = sprintf("%s",strrep(string(dt),'-','_'));
        saved_file = sprintf(src.UserData.expression, src.UserData.subject, s, src.UserData.block);
        save(saved_file, 'BAD_CH', 'SPIKE_HISTORY', 'DEBOUNCE_HISTORY', 'DEBOUNCE_LOOP_ITERATIONS', 'RISING_THRESH', ...
            'FALLING_THRESH', 'RMS_ALPHA', 'RMS_BETA', 'SELECTED_CHANNEL', ...
            'THRESHOLD_GAIN', '-v7.3');
        fprintf(1,'Saved parameters to file: %s\n', saved_file);
    end
    function handleHeatmapClick(src,~)
        row = round(src.CurrentPoint(1,2));
        col = round(src.CurrentPoint(1,1));
        clicked_ch = sub2ind([8,16],row,col);
        if ismember(clicked_ch,BAD_CH)
            h_remove = findobj(src.UserData,'UserData',clicked_ch);
            BAD_CH = setdiff(BAD_CH,clicked_ch);
            src.UserData = setdiff(src.UserData,h_remove);
            delete(h_remove);
        else
            BAD_CH = [BAD_CH, clicked_ch];
            offset_x = [-0.5, -0.5, 0.5, 0.5];
            offset_y = [-0.5, 0.5, 0.5, -0.5];
            src.UserData = [src.UserData, ...
                patch(src, col + offset_x, row + offset_y, 'k', ...
                        'UserData', clicked_ch, 'HitTest', 'off')];
        end
    end

end