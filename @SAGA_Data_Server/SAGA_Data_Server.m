classdef SAGA_Data_Server < handle
    %SAGA_DATA_SERVER Construct an instance of this class
    %   
    % Syntax:
    %   serv = SAGA_Data_Server('Name', value, ...);

    properties (Access = public)
        trigger_channel (1,2) double = [69, 69];
        counter_channel (1,2) double = [70, 70];
        sync_bit (1,2) double = [9, 9];
        sample_data (136, :, :) double  % Triggered sample data for (64 UNI + 4 BIP) x 2 SAGA
        meta_data   (:, 4) double       % [x (mm), y (mm), focus (a.u.; higher is more-focused), amplitude]
    end

    properties (GetAccess = public, SetAccess = protected)
        subject (1,1) string = "Default"
        year    (1,1) double = year(today);
        month   (1,1) double = month(today);
        day     (1,1) double = day(today);
        block   (1,1) double = 0;

        Ready (1,1) logical = false;
        Stimulus (1,1) double = 0;
        UIFigure
        UITabGroup
        UITab = struct
        UIGrid = struct     
        Experiment (1,1) matlab.ui.control.Label
        Lamp = struct       % Struct with fields that are Lamp uicontrols
        Push = struct       % Struct with fields that are PushButton uicontrols
        In = struct         % Struct with fields that are EditField or NumericEditField uicontrols
        Connection (1,1) struct = struct('Stim', [], 'Rec', [], 'Responses', []); % Has fields: "Stim" and "Rec"
    end

    properties (Hidden, Access = public)
        Queued  % Struct with queued patterns or other queued data
        prev_data
        trig_samples
        t     (1,:) double         % Relative sample times
        n_sta (1,1) double = 0;    % Number of actual STA trials observed
        n_pre (1,1) double         % Number of pre-trigger samples
        n_post (1,1) double        % Number of post-trigger samples
        pattern_logger = mlog.Logger("StimPatterns");
    end

    methods % Constructor and overloaded methods
        function self = SAGA_Data_Server(varargin)
            %SAGA_DATA_SERVER Construct an instance of this class
            %   
            % Syntax:
            %   serv = SAGA_Data_Server('Name', value, ...);

            p = inputParser();
            p.addParameter('ConfigFile', parameters('config'), ...
                @(in)(isstring(in) || all(ischar(in))));
            p.addParameter('FigureIcon', 'outline_desktop_windows_black_24dp.png', ...
                @(in)(isstring(in) || all(ischar(in))))
            p.parse(varargin{:});
            config = io.yaml.loadFile(p.Results.ConfigFile, "ConvertToArray", true);
            self.build_interface(config, p.Results);
            self.Connection.Responses = tcpserver("0.0.0.0", config.TCP.stimulation.responses, ...
                'Timeout', 30, ...
                'ConnectionChangedFcn', @self.handle_responses_connect_disconnect);
            self.Connection.Responses.configureCallback("terminator", ...
                @self.handle_message_to_responses_server);
        end

        function delete(self)
            try %#ok<TRYNC> 
                self.UIFigure.DeleteFcn = [];
                delete(self.UIFigure);
            end

            try %#ok<TRYNC>
                delete(self.Connection.Stim);
            end

            try %#ok<TRYNC>
                delete(self.Connection.Rec);
            end

            try %#ok<TRYNC>
                delete(self.Connection.Stream.A);
            end

            try %#ok<TRYNC>
                delete(self.Connection.Stream.B);
            end

            try %#ok<TRYNC>
                delete(self.Connection.Responses);
            end
        end

        function tf = isValid(self)
            tf = isValid(self.UIFigure);
        end

        function tf = isVisible(self)
            tf = isVisible(self.UIFigure);
        end
    end % End constructor & overloaded methods

    methods (Access = public) % Network message callback handlers
        handle_acquisition_stream(self, src, ~)
        handle_message_from_stim_controller(self, src, ~)
        handle_message_from_rec_controller(self, src, ~)
        handle_message_to_responses_server(self, src, ~)
        handle_rec_connect_disconnect(self, src, ~)
        handle_responses_connect_disconnect(self, src, ~)
        handle_stim_connect_disconnect(self, src, ~)
        handle_stream_connect_disconnect(self, src, ~)

        [x,y,focus] = parse_queued_pattern(self) % Parse pattern data
    end % End network message callback handlers

    methods (Access = protected)
        function handle_buffer_parameter_changed(self, ~, ~)
            self.Lamp.Init.Color = [0.1 0.1 0.9];
            self.Ready = false;
        end

        function handle_sync_bit_changed(self, src, ~)
            %HANDLE_SYNC_BIT_CHANGED  Set sync bit for both SAGA devices.
            self.sync_bit = ones(1,2) .* src.Value;
        end

        function handle_init_push(self, ~, ~)
            %HANDLE_INIT_PUSH  Pushbutton callback for "Init" button
            if ~self.Ready
                self.n_pre = self.In.N_Pre.Value;
                self.n_post = self.In.N_Post.Value;
                self.t = (-self.n_pre / 4) : 0.25 : (self.n_post / 4);
                nTrials = self.In.N_Max_Trials.Value;
                self.sample_data = nan(136, ...             % 64 UNI + 4 BIP x 2 SAGA
                    1 + self.n_pre + self.n_post, ...     % Time samples
                    nTrials);                               % Maximum allowed trials
                self.meta_data = nan(nTrials, 4); % [x (mm), y (mm), focusing (a.u.)]
                self.Stimulus = 0; % Indexing for the TCP hand-shaking part
                self.n_sta = 0; % Indexing for graphics and other "online" database tracking part
            end
            self.In.N_Pre.Enable = 'off';
            self.In.N_Post.Enable = 'off';
            self.In.N_Max_Trials.Enable = 'off';
            self.Push.Unlock_Init.Enable = 'on';
            self.Push.Init.Enable = 'off'; 
            
            self.Lamp.Init.Color = [0.1 0.9 0.1];
            self.Ready = true;
        end
    
        function handle_unlock_push(self, ~, ~)
            %HANDLE_UNLOCK_PUSH  Pushbutton callback for "Unlock" button
            self.Push.Init.Enable = 'on';
            self.In.N_Pre.Enable = 'on';
            self.In.N_Post.Enable = 'on';
            self.In.N_Max_Trials.Enable = 'on';
            self.Push.Unlock_Init.Enable = 'off';
        end

        function update_experiment_text(self, varargin)
            p = inputParser();
            p.addParameter('subject', self.subject);
            p.addParameter('year', self.year);
            p.addParameter('month', self.month);
            p.addParameter('day', self.day);
            p.addParameter('block', self.block);
            p.parse(varargin{:});

            self.Experiment.Text =  sprintf('%s: %04d-%02d-%02d (%d)', ...
                p.Results.subject, p.Results.year, p.Results.month, p.Results.day, p.Results.block);
        end

        function build_interface(self, config, parameters)
            self.UIFigure = uifigure(...
                'Name', 'TMSi SAGA Data Server', ...
                'Color', 'w', ...
                'Icon', parameters.FigureIcon, ...
                'DeleteFcn', @(~,~)self.delete);
            maingrid = uigridlayout(self.UIFigure, ...
                'ColumnWidth', {'1x', '20x', '1x'}, ...
                'RowHeight', {'1x', '20x', '1x'}, ...
                'BackgroundColor', [0 0 0]);
            self.Experiment = uilabel(maingrid, ...
                'FontName', 'Tahoma', 'FontSize', 14, 'FontWeight', 'bold', ...
                'Text', 'Not Connected', 'HorizontalAlignment', 'left', ...
                'FontColor', [1 1 1]);
            self.Experiment.Layout.Row = 1;
            self.Experiment.Layout.Column = [1 2];
            self.Lamp.Responses = uilamp(maingrid, 'Color', [0.1 0.1 0.9]);
            self.Lamp.Responses.Layout.Row = 1;
            self.Lamp.Responses.Layout.Column = 3;

            self.UITabGroup = uitabgroup(maingrid);
            self.UITabGroup.Layout.Row = [2 3];
            self.UITabGroup.Layout.Column = [1 3];
            self.UITab.Controls = uitab(self.UITabGroup, ...
                'Title', 'Controls');
            self.UIGrid.Controls = uigridlayout(self.UITab.Controls, ...
                'ColumnWidth', {'1x', '1x', '1x'}, ...
                'RowHeight', {'1x', '1x', '1x', '1x'}, ...
                'BackgroundColor', [1 1 1]);

            % % Interface part for pre-allocating triggered data buffer % %
            self.Lamp.Init = uilamp(self.UIGrid.Controls, ...
                'Color', [0.9 0.9 0.9]);
            self.Lamp.Init.Layout.Row = 1;
            self.Lamp.Init.Layout.Column = 1;

            self.Push.Init = uibutton(self.UIGrid.Controls, 'push', ...
                'FontName', 'Tahoma', 'FontSize', 20, ...
                'Tooltip', {'Re-allocate stim-triggered data tensor.'}, ...
                'Enable', 'on', ...
                'Text', 'Init', 'ButtonPushedFcn', @self.handle_init_push);
            self.Push.Init.Layout.Row = 2;
            self.Push.Init.Layout.Column = 1;

            self.Push.Unlock_Init = uibutton(self.UIGrid.Controls, 'push', ...
                'FontName', 'Tahoma', 'FontSize', 20, ...
                'Tooltip', {'Unlocks the Init button.'}, ...
                'Enable', 'off', ...
                'Text', 'Unlock', 'ButtonPushedFcn', @self.handle_unlock_push);
            self.Push.Unlock_Init.Layout.Row = 3;
            self.Push.Unlock_Init.Layout.Column = 1;

            lab = uilabel(self.UIGrid.Controls, ...
                'FontName', 'Tahoma', 'FontSize', 14, ...
                'Text', 'Sync Bit', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 1;
            lab.Layout.Column = 2;

            self.In.Sync_Bit = uieditfield(self.UIGrid.Controls, 'numeric', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'RoundFractionalValues', true, ...
                'FontSize', 14, ...
                'Limits', [0, 15], ...
                'ValueChangedFcn', @self.handle_sync_bit_changed, ...
                'Value', config.SAGA.A.Trigger.Bit);
            self.In.Sync_Bit.Layout.Row = 1;
            self.In.Sync_Bit.Layout.Column = 3;

            lab = uilabel(self.UIGrid.Controls, ...
                'FontName', 'Tahoma', 'FontSize', 14, ...
                'Text', 'Pre-Trigger Samples', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 2;
            lab.Layout.Column = 2;

            self.In.N_Pre = uieditfield(self.UIGrid.Controls, 'numeric', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'RoundFractionalValues', false, ...
                'FontSize', 14, ...
                'Limits', [0, 80], ...
                'ValueChangedFcn', @self.handle_buffer_parameter_changed, ...
                'Value', config.Default.N_Pre);
            self.In.N_Pre.Layout.Row = 2;
            self.In.N_Pre.Layout.Column = 3;

            lab = uilabel(self.UIGrid.Controls, ...
                'FontName', 'Tahoma', 'FontSize', 14, ...
                'Text', 'Post-Trigger Samples', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 3;
            lab.Layout.Column = 2;

            self.In.N_Post = uieditfield(self.UIGrid.Controls, 'numeric', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'RoundFractionalValues', false, ...
                'FontSize', 14, ...
                'Limits', [0, 200], ...
                'ValueChangedFcn', @self.handle_buffer_parameter_changed, ...
                'Value', config.Default.N_Post);
            self.In.N_Post.Layout.Row = 3;
            self.In.N_Post.Layout.Column = 3;

            lab = uilabel(self.UIGrid.Controls, ...
                'FontName', 'Tahoma', 'FontSize', 12, ...
                'Text', 'Max Buffered Trials', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 4;
            lab.Layout.Column = 2;

            self.In.N_Max_Trials = uieditfield(self.UIGrid.Controls, 'numeric', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'RoundFractionalValues', true, ...
                'ValueDisplayFormat', '%6d', ...
                'FontSize', 14, ...
                'Limits', [1, 60000], ...
                'ValueChangedFcn', @self.handle_buffer_parameter_changed, ...
                'Value', config.Default.N_Max_Trials);
            self.In.N_Max_Trials.Layout.Row = 4;
            self.In.N_Max_Trials.Layout.Column = 3;

            % % Build the tab for "Stimulation Handshake" connections % %
            self.UITab.StimConnections = uitab(self.UITabGroup, ...
                'Title', 'Stim Handshake Connections');
            self.UIGrid.StimConnections = uigridlayout(self.UITab.StimConnections, ...
                'ColumnWidth', {'2x', '3x', '1x', '1x'}, ...
                'RowHeight', {'1x', '1x', '1x', '1x'}, ...
                'BackgroundColor', [1 1 1]);

            lab = uilabel(self.UIGrid.StimConnections, ...
                'FontName', 'Tahoma', 'FontSize', 16, ...
                'Text', 'Stim Server IP', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 1;
            lab.Layout.Column = 1;

            self.In.StimServerHost = uieditfield(self.UIGrid.StimConnections, 'text', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'FontSize', 16, ...
                'Placeholder', 'A.B.C.D', ...
                'Value', config.Host.stimulation.server);
            self.In.StimServerHost.Layout.Row = 1;
            self.In.StimServerHost.Layout.Column = 2;

            lab = uilabel(self.UIGrid.StimConnections, ...
                'FontName', 'Tahoma', 'FontSize', 16, ...
                'Text', 'Stim Port', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 2;
            lab.Layout.Column = 1;

            self.In.StimServerPort = uieditfield(self.UIGrid.StimConnections, 'numeric', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'FontSize', 16, ...
                'Limits', [1, 100000], ...
                'Value', config.TCP.stimulation.server);
            self.In.StimServerPort.Layout.Row = 2;
            self.In.StimServerPort.Layout.Column = 2;

            lab = uilabel(self.UIGrid.StimConnections, ...
                'FontName', 'Tahoma', 'FontSize', 13, ...
                'Text', 'Connected', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 1;
            lab.Layout.Column = 3;

            self.Lamp.StimServer = uilamp(self.UIGrid.StimConnections, ...
                'Color', [0.9 0.9 0.9]);
            self.Lamp.StimServer.Layout.Row = 1;
            self.Lamp.StimServer.Layout.Column = 4;

            self.Push.Connect_Stim = uibutton(self.UIGrid.StimConnections, 'push', ...
                'FontName', 'Tahoma', 'FontSize', 20, ...
                'Tooltip', {'Connect via TCP with stimulation controller server.'}, ...
                'Text', 'Connect', 'ButtonPushedFcn', @self.handle_stim_connect_disconnect);
            self.Push.Connect_Stim.Layout.Row = 2;
            self.Push.Connect_Stim.Layout.Column = [3 4];

            lab = uilabel(self.UIGrid.StimConnections, ...
                'FontName', 'Tahoma', 'FontSize', 16, ...
                'Text', 'Rec Server IP', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 3;
            lab.Layout.Column = 1;

            self.In.TMSiServerHost = uieditfield(self.UIGrid.StimConnections, 'text', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'FontSize', 16, ...
                'Placeholder', 'A.B.C.D', ...
                'Value', config.Host.interface);
            self.In.TMSiServerHost.Layout.Row = 3;
            self.In.TMSiServerHost.Layout.Column = 2;

            lab = uilabel(self.UIGrid.StimConnections, ...
                'FontName', 'Tahoma', 'FontSize', 16, ...
                'Text', 'Rec Port', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 4;
            lab.Layout.Column = 1;

            self.In.TMSiServerPort = uieditfield(self.UIGrid.StimConnections, 'numeric', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'FontSize', 16, ...
                'Limits', [1, 100000], ...
                'Value', config.TCP.tmsi.server);
            self.In.TMSiServerPort.Layout.Row = 4;
            self.In.TMSiServerPort.Layout.Column = 2;
            
            lab = uilabel(self.UIGrid.StimConnections, ...
                'FontName', 'Tahoma', 'FontSize', 13, ...
                'Text', 'Connected', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 3;
            lab.Layout.Column = 3;

            self.Lamp.TMSiServer = uilamp(self.UIGrid.StimConnections, ...
                'Color', [0.9 0.9 0.9]);
            self.Lamp.TMSiServer.Layout.Row = 3;
            self.Lamp.TMSiServer.Layout.Column = 4;

            self.Push.Connect_Rec = uibutton(self.UIGrid.StimConnections, 'push', ...
                'FontName', 'Tahoma', 'FontSize', 20, ...
                'Tooltip', {'Connect via UDP with stimulation controller server.'}, ...
                'Text', 'Connect', 'ButtonPushedFcn', @self.handle_rec_connect_disconnect);
            self.Push.Connect_Rec.Layout.Row = 4;
            self.Push.Connect_Rec.Layout.Column = [3 4];

            % % Build the tab for TMSi Recording Stream connections % %
            self.UITab.RecConnections = uitab(self.UITabGroup, ...
                'Title', 'Recording Connections');
            self.UIGrid.RecConnections = uigridlayout(self.UITab.RecConnections, ...
                'ColumnWidth', {'2x', '3x', '2x', '1x'}, ...
                'RowHeight', {'1x', '1x', '1x'}, ...
                'BackgroundColor', [1 1 1]);

            lab = uilabel(self.UIGrid.RecConnections, ...
                'FontName', 'Tahoma', 'FontSize', 16, ...
                'Text', 'SAGA Host', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 1;
            lab.Layout.Column = 1;

            self.In.StreamHost = uieditfield(self.UIGrid.RecConnections, 'text', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'FontSize', 16, ...
                'Placeholder', 'A.B.C.D', ...
                'Value', config.Host.streams);
            self.In.StreamHost.Layout.Row = 1;
            self.In.StreamHost.Layout.Column = 2:3;

            lab = uilabel(self.UIGrid.RecConnections, ...
                'FontName', 'Tahoma', 'FontSize', 16, ...
                'Text', 'SAGA A Port', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 2;
            lab.Layout.Column = 1;

            self.In.StreamPort.A = uieditfield(self.UIGrid.RecConnections, 'numeric', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'FontSize', 16, ...
                'Limits', [1, 100000], ...
                'Value', config.TCP.tmsi.streams.A);
            self.In.StreamPort.A.Layout.Row = 2;
            self.In.StreamPort.A.Layout.Column = 2;

            self.Push.Connect_Stream.A = uibutton(self.UIGrid.RecConnections, 'push', ...
                'FontName', 'Tahoma', 'FontSize', 20, ...
                'Tooltip', {'Connect via TCP with SAGA-A stream.'}, ...
                'UserData', struct('tag', "A", 'saga', 1), ...
                'Text', 'Connect', 'ButtonPushedFcn', @self.handle_stream_connect_disconnect);
            self.Push.Connect_Stream.A.Layout.Row = 2;
            self.Push.Connect_Stream.A.Layout.Column = 3;

            self.Lamp.Stream.A = uilamp(self.UIGrid.RecConnections, ...
                'Color', [0.9 0.9 0.9]);
            self.Lamp.Stream.A.Layout.Row = 2;
            self.Lamp.Stream.A.Layout.Column = 4;

            lab = uilabel(self.UIGrid.RecConnections, ...
                'FontName', 'Tahoma', 'FontSize', 16, ...
                'Text', 'SAGA B Port', ...
                'HorizontalAlignment', 'right');
            lab.Layout.Row = 3;
            lab.Layout.Column = 1;

            self.In.StreamPort.B = uieditfield(self.UIGrid.RecConnections, 'numeric', ...
                'HorizontalAlignment', 'center', ...
                'FontName', 'Tahoma', ...
                'FontSize', 16, ...
                'Limits', [1, 100000], ...
                'Value', config.TCP.tmsi.streams.B);
            self.In.StreamPort.B.Layout.Row = 3;
            self.In.StreamPort.B.Layout.Column = 2;

            self.Push.Connect_Stream.B = uibutton(self.UIGrid.RecConnections, 'push', ...
                'FontName', 'Tahoma', 'FontSize', 20, ...
                'Tooltip', {'Connect via TCP with SAGA-B stream.'}, ...
                'UserData', struct('tag', "B", 'saga', 2), ...
                'Text', 'Connect', 'ButtonPushedFcn', @self.handle_stream_connect_disconnect);
            self.Push.Connect_Stream.B.Layout.Row = 3;
            self.Push.Connect_Stream.B.Layout.Column = 3;

            self.Lamp.Stream.B = uilamp(self.UIGrid.RecConnections, ...
                'Color', [0.9 0.9 0.9]);
            self.Lamp.Stream.B.Layout.Row = 3;
            self.Lamp.Stream.B.Layout.Column = 4;
            
        end
    end

    methods (Static, Access = public)
        pdata = parse_pattern_volume_string(str, varargin) % Parses pattern volume string from filenames.
    end
end